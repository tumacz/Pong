//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/MenuControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MenuControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MenuControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MenuControls"",
    ""maps"": [
        {
            ""name"": ""MenuMap"",
            ""id"": ""6b6b2b70-ce36-4805-98bf-a43c1592a70a"",
            ""actions"": [
                {
                    ""name"": ""IndicatorUp"",
                    ""type"": ""Value"",
                    ""id"": ""1e9680ca-5519-4a58-8b10-437a7e08fe8b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""IndicatorDown"",
                    ""type"": ""Value"",
                    ""id"": ""86e5e488-5490-49aa-95fe-3da2904ad76a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ConfirmIndicated"",
                    ""type"": ""Value"",
                    ""id"": ""684c66f8-70cc-46f8-8d15-e52985270021"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d420201f-5c38-449e-bb09-da01adaa0a11"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IndicatorUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f06a4a89-587a-4a1d-87aa-07e22060597d"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IndicatorUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3f6e9aa-49b9-462a-8481-66775c16856b"",
                    ""path"": ""<Keyboard>/numpad8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IndicatorUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a1f7393-5f23-41ce-b299-945ddb580137"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IndicatorDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""514f81e2-aa7a-4182-9a20-ec57b00b67e8"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IndicatorDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b3e6dd3-14c5-4926-a443-09a0263e9b7f"",
                    ""path"": ""<Keyboard>/numpad2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IndicatorDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97ada4fc-efc4-46ad-b426-02a86d2e459c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConfirmIndicated"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""417dea84-973f-43fa-8a22-c1f756e633fc"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConfirmIndicated"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MenuMap
        m_MenuMap = asset.FindActionMap("MenuMap", throwIfNotFound: true);
        m_MenuMap_IndicatorUp = m_MenuMap.FindAction("IndicatorUp", throwIfNotFound: true);
        m_MenuMap_IndicatorDown = m_MenuMap.FindAction("IndicatorDown", throwIfNotFound: true);
        m_MenuMap_ConfirmIndicated = m_MenuMap.FindAction("ConfirmIndicated", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MenuMap
    private readonly InputActionMap m_MenuMap;
    private List<IMenuMapActions> m_MenuMapActionsCallbackInterfaces = new List<IMenuMapActions>();
    private readonly InputAction m_MenuMap_IndicatorUp;
    private readonly InputAction m_MenuMap_IndicatorDown;
    private readonly InputAction m_MenuMap_ConfirmIndicated;
    public struct MenuMapActions
    {
        private @MenuControls m_Wrapper;
        public MenuMapActions(@MenuControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @IndicatorUp => m_Wrapper.m_MenuMap_IndicatorUp;
        public InputAction @IndicatorDown => m_Wrapper.m_MenuMap_IndicatorDown;
        public InputAction @ConfirmIndicated => m_Wrapper.m_MenuMap_ConfirmIndicated;
        public InputActionMap Get() { return m_Wrapper.m_MenuMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuMapActions set) { return set.Get(); }
        public void AddCallbacks(IMenuMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuMapActionsCallbackInterfaces.Add(instance);
            @IndicatorUp.started += instance.OnIndicatorUp;
            @IndicatorUp.performed += instance.OnIndicatorUp;
            @IndicatorUp.canceled += instance.OnIndicatorUp;
            @IndicatorDown.started += instance.OnIndicatorDown;
            @IndicatorDown.performed += instance.OnIndicatorDown;
            @IndicatorDown.canceled += instance.OnIndicatorDown;
            @ConfirmIndicated.started += instance.OnConfirmIndicated;
            @ConfirmIndicated.performed += instance.OnConfirmIndicated;
            @ConfirmIndicated.canceled += instance.OnConfirmIndicated;
        }

        private void UnregisterCallbacks(IMenuMapActions instance)
        {
            @IndicatorUp.started -= instance.OnIndicatorUp;
            @IndicatorUp.performed -= instance.OnIndicatorUp;
            @IndicatorUp.canceled -= instance.OnIndicatorUp;
            @IndicatorDown.started -= instance.OnIndicatorDown;
            @IndicatorDown.performed -= instance.OnIndicatorDown;
            @IndicatorDown.canceled -= instance.OnIndicatorDown;
            @ConfirmIndicated.started -= instance.OnConfirmIndicated;
            @ConfirmIndicated.performed -= instance.OnConfirmIndicated;
            @ConfirmIndicated.canceled -= instance.OnConfirmIndicated;
        }

        public void RemoveCallbacks(IMenuMapActions instance)
        {
            if (m_Wrapper.m_MenuMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuMapActions @MenuMap => new MenuMapActions(this);
    public interface IMenuMapActions
    {
        void OnIndicatorUp(InputAction.CallbackContext context);
        void OnIndicatorDown(InputAction.CallbackContext context);
        void OnConfirmIndicated(InputAction.CallbackContext context);
    }
}
