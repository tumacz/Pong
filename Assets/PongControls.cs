//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PongControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PongControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PongControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PongControls"",
    ""maps"": [
        {
            ""name"": ""PongMap"",
            ""id"": ""c4a786d9-da13-4c4c-ada5-ea4db1c03625"",
            ""actions"": [
                {
                    ""name"": ""moveUp"",
                    ""type"": ""Value"",
                    ""id"": ""63d260e1-a775-4ff7-b89b-a32de32ac3a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""moveDown"",
                    ""type"": ""Value"",
                    ""id"": ""12feb2db-ed96-43f9-9f5f-96de56c6e77d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6466a1f5-2dbe-40e4-abcb-29fafafb98f5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad1c2c6d-7b16-4158-9531-be8d7043884c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PongMap2"",
            ""id"": ""4b503576-eab5-4135-90e1-6ad517fa4701"",
            ""actions"": [
                {
                    ""name"": ""moveDown"",
                    ""type"": ""Value"",
                    ""id"": ""1f7132e3-2224-4024-8cc7-a1d695fb8118"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""moveUp"",
                    ""type"": ""Value"",
                    ""id"": ""fe334aa3-a1c1-4618-98d2-013ca3fae02f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""577d7c0f-98c8-4f8f-ae51-04022bf774d1"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""384ac9c6-1d61-4faa-827b-a6ce620b141d"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PongMap
        m_PongMap = asset.FindActionMap("PongMap", throwIfNotFound: true);
        m_PongMap_moveUp = m_PongMap.FindAction("moveUp", throwIfNotFound: true);
        m_PongMap_moveDown = m_PongMap.FindAction("moveDown", throwIfNotFound: true);
        // PongMap2
        m_PongMap2 = asset.FindActionMap("PongMap2", throwIfNotFound: true);
        m_PongMap2_moveDown = m_PongMap2.FindAction("moveDown", throwIfNotFound: true);
        m_PongMap2_moveUp = m_PongMap2.FindAction("moveUp", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PongMap
    private readonly InputActionMap m_PongMap;
    private List<IPongMapActions> m_PongMapActionsCallbackInterfaces = new List<IPongMapActions>();
    private readonly InputAction m_PongMap_moveUp;
    private readonly InputAction m_PongMap_moveDown;
    public struct PongMapActions
    {
        private @PongControls m_Wrapper;
        public PongMapActions(@PongControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @moveUp => m_Wrapper.m_PongMap_moveUp;
        public InputAction @moveDown => m_Wrapper.m_PongMap_moveDown;
        public InputActionMap Get() { return m_Wrapper.m_PongMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PongMapActions set) { return set.Get(); }
        public void AddCallbacks(IPongMapActions instance)
        {
            if (instance == null || m_Wrapper.m_PongMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PongMapActionsCallbackInterfaces.Add(instance);
            @moveUp.started += instance.OnMoveUp;
            @moveUp.performed += instance.OnMoveUp;
            @moveUp.canceled += instance.OnMoveUp;
            @moveDown.started += instance.OnMoveDown;
            @moveDown.performed += instance.OnMoveDown;
            @moveDown.canceled += instance.OnMoveDown;
        }

        private void UnregisterCallbacks(IPongMapActions instance)
        {
            @moveUp.started -= instance.OnMoveUp;
            @moveUp.performed -= instance.OnMoveUp;
            @moveUp.canceled -= instance.OnMoveUp;
            @moveDown.started -= instance.OnMoveDown;
            @moveDown.performed -= instance.OnMoveDown;
            @moveDown.canceled -= instance.OnMoveDown;
        }

        public void RemoveCallbacks(IPongMapActions instance)
        {
            if (m_Wrapper.m_PongMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPongMapActions instance)
        {
            foreach (var item in m_Wrapper.m_PongMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PongMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PongMapActions @PongMap => new PongMapActions(this);

    // PongMap2
    private readonly InputActionMap m_PongMap2;
    private List<IPongMap2Actions> m_PongMap2ActionsCallbackInterfaces = new List<IPongMap2Actions>();
    private readonly InputAction m_PongMap2_moveDown;
    private readonly InputAction m_PongMap2_moveUp;
    public struct PongMap2Actions
    {
        private @PongControls m_Wrapper;
        public PongMap2Actions(@PongControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @moveDown => m_Wrapper.m_PongMap2_moveDown;
        public InputAction @moveUp => m_Wrapper.m_PongMap2_moveUp;
        public InputActionMap Get() { return m_Wrapper.m_PongMap2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PongMap2Actions set) { return set.Get(); }
        public void AddCallbacks(IPongMap2Actions instance)
        {
            if (instance == null || m_Wrapper.m_PongMap2ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PongMap2ActionsCallbackInterfaces.Add(instance);
            @moveDown.started += instance.OnMoveDown;
            @moveDown.performed += instance.OnMoveDown;
            @moveDown.canceled += instance.OnMoveDown;
            @moveUp.started += instance.OnMoveUp;
            @moveUp.performed += instance.OnMoveUp;
            @moveUp.canceled += instance.OnMoveUp;
        }

        private void UnregisterCallbacks(IPongMap2Actions instance)
        {
            @moveDown.started -= instance.OnMoveDown;
            @moveDown.performed -= instance.OnMoveDown;
            @moveDown.canceled -= instance.OnMoveDown;
            @moveUp.started -= instance.OnMoveUp;
            @moveUp.performed -= instance.OnMoveUp;
            @moveUp.canceled -= instance.OnMoveUp;
        }

        public void RemoveCallbacks(IPongMap2Actions instance)
        {
            if (m_Wrapper.m_PongMap2ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPongMap2Actions instance)
        {
            foreach (var item in m_Wrapper.m_PongMap2ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PongMap2ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PongMap2Actions @PongMap2 => new PongMap2Actions(this);
    public interface IPongMapActions
    {
        void OnMoveUp(InputAction.CallbackContext context);
        void OnMoveDown(InputAction.CallbackContext context);
    }
    public interface IPongMap2Actions
    {
        void OnMoveDown(InputAction.CallbackContext context);
        void OnMoveUp(InputAction.CallbackContext context);
    }
}
