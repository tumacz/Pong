//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PongControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PongControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PongControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PongControls"",
    ""maps"": [
        {
            ""name"": ""PongMap"",
            ""id"": ""55df209a-b9c4-4da7-b3a5-f766cc0f3102"",
            ""actions"": [
                {
                    ""name"": ""moveUp"",
                    ""type"": ""Value"",
                    ""id"": ""f9d32847-fa1d-45a6-b9b2-accabaac8e98"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""moveDown"",
                    ""type"": ""Value"",
                    ""id"": ""eda2bcc1-f0be-4623-8b3a-8ff8d7bce394"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""957862c4-de06-4646-aec0-170c9dcaa3dd"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""22d01162-faa1-4d99-8720-f2d6b5b99995"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PongMap
        m_PongMap = asset.FindActionMap("PongMap", throwIfNotFound: true);
        m_PongMap_moveUp = m_PongMap.FindAction("moveUp", throwIfNotFound: true);
        m_PongMap_moveDown = m_PongMap.FindAction("moveDown", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PongMap
    private readonly InputActionMap m_PongMap;
    private List<IPongMapActions> m_PongMapActionsCallbackInterfaces = new List<IPongMapActions>();
    private readonly InputAction m_PongMap_moveUp;
    private readonly InputAction m_PongMap_moveDown;
    public struct PongMapActions
    {
        private @PongControls m_Wrapper;
        public PongMapActions(@PongControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @moveUp => m_Wrapper.m_PongMap_moveUp;
        public InputAction @moveDown => m_Wrapper.m_PongMap_moveDown;
        public InputActionMap Get() { return m_Wrapper.m_PongMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PongMapActions set) { return set.Get(); }
        public void AddCallbacks(IPongMapActions instance)
        {
            if (instance == null || m_Wrapper.m_PongMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PongMapActionsCallbackInterfaces.Add(instance);
            @moveUp.started += instance.OnMoveUp;
            @moveUp.performed += instance.OnMoveUp;
            @moveUp.canceled += instance.OnMoveUp;
            @moveDown.started += instance.OnMoveDown;
            @moveDown.performed += instance.OnMoveDown;
            @moveDown.canceled += instance.OnMoveDown;
        }

        private void UnregisterCallbacks(IPongMapActions instance)
        {
            @moveUp.started -= instance.OnMoveUp;
            @moveUp.performed -= instance.OnMoveUp;
            @moveUp.canceled -= instance.OnMoveUp;
            @moveDown.started -= instance.OnMoveDown;
            @moveDown.performed -= instance.OnMoveDown;
            @moveDown.canceled -= instance.OnMoveDown;
        }

        public void RemoveCallbacks(IPongMapActions instance)
        {
            if (m_Wrapper.m_PongMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPongMapActions instance)
        {
            foreach (var item in m_Wrapper.m_PongMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PongMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PongMapActions @PongMap => new PongMapActions(this);
    public interface IPongMapActions
    {
        void OnMoveUp(InputAction.CallbackContext context);
        void OnMoveDown(InputAction.CallbackContext context);
    }
}
